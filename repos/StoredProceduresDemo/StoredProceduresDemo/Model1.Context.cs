//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StoredProceduresDemo
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class b248dbEntities : DbContext
    {
        public b248dbEntities()
            : base("name=b248dbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<customer> customers { get; set; }
        public virtual DbSet<customer1> customers1 { get; set; }
        public virtual DbSet<order> orders { get; set; }
        public virtual DbSet<student> students { get; set; }
        public virtual DbSet<TableA> TableAs { get; set; }
        public virtual DbSet<TableB> TableBs { get; set; }
        public virtual DbSet<userlogin> userlogins { get; set; }
    
        public virtual ObjectResult<getcudt_Result> getcudt(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getcudt_Result>("getcudt", idParameter);
        }
    
        public virtual ObjectResult<getcust_Result> getcust(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getcust_Result>("getcust", idParameter);
        }
    
        public virtual ObjectResult<getcustomers_Result> getcustomers(string c, string a)
        {
            var cParameter = c != null ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(string));
    
            var aParameter = a != null ?
                new ObjectParameter("a", a) :
                new ObjectParameter("a", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getcustomers_Result>("getcustomers", cParameter, aParameter);
        }
    }
}
